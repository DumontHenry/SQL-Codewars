SQL Basics: Top 10 customers by total payments amount
SELECT
  c.customer_id,
  c.email,
  COUNT(*) AS payments_count,
  SUM(p.amount)::float AS total_amount
FROM customer AS c
INNER JOIN payment AS p ON p.customer_id = c.customer_id
GROUP BY c.customer_id
ORDER BY total_amount DESC
LIMIT 10

SQL Basics: Simple JOIN and RANK
SELECT
  RANK() OVER(ORDER BY sale_count DESC) AS sale_rank,
  people_sales.*
FROM (
  SELECT
    people.id AS id,
    people.name AS name,
    COUNT(sales.id) AS sale_count
  FROM people
  JOIN sales ON people.id = sales.people_id
  GROUP BY people.id
) AS people_sales

SQL Basics: Simple UNION ALL
SELECT 'US' AS location, * 
FROM ussales 
WHERE price > 50
UNION ALL
SELECT 'EU' AS location, * 
FROM eusales 
WHERE price > 50;

SQL Basics: Simple EXISTS
SELECT id, name
FROM departments
WHERE EXISTS (
    SELECT price 
    FROM sales 
    WHERE department_id = departments.id AND price >= 98.00);

SQL Basics: Simple HAVING
SELECT age, COUNT(*) AS total_people
FROM people
GROUP BY age
HAVING COUNT(*) >= 10;

SQL Basics: Simple IN
SELECT id, name
FROM departments
WHERE id IN (SELECT department_id FROM sales 
                WHERE (price) > 98.00);

SQL Basics: Create a FUNCTION (DATES)
CREATE FUNCTION agecalculator(age DATE) RETURNS INTEGER AS $$
BEGIN
    return date_part('year', AGE(age));
END 
$$ LANGUAGE plpgsql;

SQL Basics: Simple FULL TEXT SEARCH
SELECT *
FROM product
  WHERE to_tsvector(name) @@ to_tsquery('Awesome');
  
SQL: Conditional Count
 SELECT DATE_PART('month', payment_date) AS month
       , COUNT(payment)      AS total_count
       , SUM(payment.amount) AS total_amount
       , COUNT(payment)      FILTER (WHERE staff_id = 1) AS mike_count
       , SUM(payment.amount) FILTER (WHERE staff_id = 1) AS mike_amount
       , COUNT(payment)      FILTER (WHERE staff_id = 2) AS jon_count
       , SUM(payment.amount) FILTER (WHERE staff_id = 2) AS jon_amount
    FROM payment
GROUP BY month
ORDER BY month

SQL: Calculating Batting Average
SELECT
  player_name,
  games,
  CAST(ROUND(hits / at_bats::numeric, 3) AS text) AS batting_average
FROM yankees
WHERE at_bats > 100
ORDER BY batting_average DESC;

SQL: Regex AlphaNumeric Split
SELECT 
    project, 
    regexp_replace(address, '\d', '', 'g') AS letters,
    regexp_replace(address, '\D', '', 'g') AS numbers
FROM repositories

SQL Basics: Simple PIVOTING data WITHOUT CROSSTAB
SELECT
    p.name,
    COUNT((CASE when detail = 'good' then detail end)) AS "good",
    COUNT((CASE when detail = 'ok' then detail end)) AS "ok",
    COUNT((CASE when detail = 'bad' then detail end)) AS "bad"
FROM
   details d,
   products p
WHERE p.id = d.product_id
GROUP BY 
    name
ORDER BY 
    name



